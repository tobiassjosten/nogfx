// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/tobiassjosten/nogfx/pkg"
	"sync"
)

// Ensure, that ModuleMock does implement pkg.Module.
// If this is not the case, regenerate this file with moq.
var _ pkg.Module = &ModuleMock{}

// ModuleMock is a mock implementation of pkg.Module.
//
// 	func TestSomethingThatUsesModule(t *testing.T) {
//
// 		// make and configure a mocked pkg.Module
// 		mockedModule := &ModuleMock{
// 			InputTriggersFunc: func() []pkg.Trigger[pkg.Input] {
// 				panic("mock out the InputTriggers method")
// 			},
// 			OutputTriggersFunc: func() []pkg.Trigger[pkg.Output] {
// 				panic("mock out the OutputTriggers method")
// 			},
// 		}
//
// 		// use mockedModule in code that requires pkg.Module
// 		// and then make assertions.
//
// 	}
type ModuleMock struct {
	// InputTriggersFunc mocks the InputTriggers method.
	InputTriggersFunc func() []pkg.Trigger[pkg.Input]

	// OutputTriggersFunc mocks the OutputTriggers method.
	OutputTriggersFunc func() []pkg.Trigger[pkg.Output]

	// calls tracks calls to the methods.
	calls struct {
		// InputTriggers holds details about calls to the InputTriggers method.
		InputTriggers []struct {
		}
		// OutputTriggers holds details about calls to the OutputTriggers method.
		OutputTriggers []struct {
		}
	}
	lockInputTriggers  sync.RWMutex
	lockOutputTriggers sync.RWMutex
}

// InputTriggers calls InputTriggersFunc.
func (mock *ModuleMock) InputTriggers() []pkg.Trigger[pkg.Input] {
	if mock.InputTriggersFunc == nil {
		panic("ModuleMock.InputTriggersFunc: method is nil but Module.InputTriggers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInputTriggers.Lock()
	mock.calls.InputTriggers = append(mock.calls.InputTriggers, callInfo)
	mock.lockInputTriggers.Unlock()
	return mock.InputTriggersFunc()
}

// InputTriggersCalls gets all the calls that were made to InputTriggers.
// Check the length with:
//     len(mockedModule.InputTriggersCalls())
func (mock *ModuleMock) InputTriggersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInputTriggers.RLock()
	calls = mock.calls.InputTriggers
	mock.lockInputTriggers.RUnlock()
	return calls
}

// OutputTriggers calls OutputTriggersFunc.
func (mock *ModuleMock) OutputTriggers() []pkg.Trigger[pkg.Output] {
	if mock.OutputTriggersFunc == nil {
		panic("ModuleMock.OutputTriggersFunc: method is nil but Module.OutputTriggers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockOutputTriggers.Lock()
	mock.calls.OutputTriggers = append(mock.calls.OutputTriggers, callInfo)
	mock.lockOutputTriggers.Unlock()
	return mock.OutputTriggersFunc()
}

// OutputTriggersCalls gets all the calls that were made to OutputTriggers.
// Check the length with:
//     len(mockedModule.OutputTriggersCalls())
func (mock *ModuleMock) OutputTriggersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockOutputTriggers.RLock()
	calls = mock.calls.OutputTriggers
	mock.lockOutputTriggers.RUnlock()
	return calls
}
