// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/tobiassjosten/nogfx/pkg"
	"sync"
)

// Ensure, that ModuleMock does implement pkg.Module.
// If this is not the case, regenerate this file with moq.
var _ pkg.Module = &ModuleMock{}

// ModuleMock is a mock implementation of pkg.Module.
//
// 	func TestSomethingThatUsesModule(t *testing.T) {
//
// 		// make and configure a mocked pkg.Module
// 		mockedModule := &ModuleMock{
// 			TriggersFunc: func() []pkg.Trigger {
// 				panic("mock out the Triggers method")
// 			},
// 		}
//
// 		// use mockedModule in code that requires pkg.Module
// 		// and then make assertions.
//
// 	}
type ModuleMock struct {
	// TriggersFunc mocks the Triggers method.
	TriggersFunc func() []pkg.Trigger

	// calls tracks calls to the methods.
	calls struct {
		// Triggers holds details about calls to the Triggers method.
		Triggers []struct {
		}
	}
	lockTriggers sync.RWMutex
}

// Triggers calls TriggersFunc.
func (mock *ModuleMock) Triggers() []pkg.Trigger {
	if mock.TriggersFunc == nil {
		panic("ModuleMock.TriggersFunc: method is nil but Module.Triggers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTriggers.Lock()
	mock.calls.Triggers = append(mock.calls.Triggers, callInfo)
	mock.lockTriggers.Unlock()
	return mock.TriggersFunc()
}

// TriggersCalls gets all the calls that were made to Triggers.
// Check the length with:
//     len(mockedModule.TriggersCalls())
func (mock *ModuleMock) TriggersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTriggers.RLock()
	calls = mock.calls.Triggers
	mock.lockTriggers.RUnlock()
	return calls
}
