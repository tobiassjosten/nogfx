// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/tobiassjosten/nogfx/pkg"
	"sync"
)

// Ensure, that WorldMock does implement pkg.World.
// If this is not the case, regenerate this file with moq.
var _ pkg.World = &WorldMock{}

// WorldMock is a mock implementation of pkg.World.
//
// 	func TestSomethingThatUsesWorld(t *testing.T) {
//
// 		// make and configure a mocked pkg.World
// 		mockedWorld := &WorldMock{
// 			OnCommandFunc: func(bytes []byte) pkg.Inoutput {
// 				panic("mock out the OnCommand method")
// 			},
// 			OnInoutputFunc: func(inoutput pkg.Inoutput) pkg.Inoutput {
// 				panic("mock out the OnInoutput method")
// 			},
// 		}
//
// 		// use mockedWorld in code that requires pkg.World
// 		// and then make assertions.
//
// 	}
type WorldMock struct {
	// OnCommandFunc mocks the OnCommand method.
	OnCommandFunc func(bytes []byte) pkg.Inoutput

	// OnInoutputFunc mocks the OnInoutput method.
	OnInoutputFunc func(inoutput pkg.Inoutput) pkg.Inoutput

	// calls tracks calls to the methods.
	calls struct {
		// OnCommand holds details about calls to the OnCommand method.
		OnCommand []struct {
			// Bytes is the bytes argument value.
			Bytes []byte
		}
		// OnInoutput holds details about calls to the OnInoutput method.
		OnInoutput []struct {
			// Inoutput is the inoutput argument value.
			Inoutput pkg.Inoutput
		}
	}
	lockOnCommand  sync.RWMutex
	lockOnInoutput sync.RWMutex
}

// OnCommand calls OnCommandFunc.
func (mock *WorldMock) OnCommand(bytes []byte) pkg.Inoutput {
	if mock.OnCommandFunc == nil {
		panic("WorldMock.OnCommandFunc: method is nil but World.OnCommand was just called")
	}
	callInfo := struct {
		Bytes []byte
	}{
		Bytes: bytes,
	}
	mock.lockOnCommand.Lock()
	mock.calls.OnCommand = append(mock.calls.OnCommand, callInfo)
	mock.lockOnCommand.Unlock()
	return mock.OnCommandFunc(bytes)
}

// OnCommandCalls gets all the calls that were made to OnCommand.
// Check the length with:
//     len(mockedWorld.OnCommandCalls())
func (mock *WorldMock) OnCommandCalls() []struct {
	Bytes []byte
} {
	var calls []struct {
		Bytes []byte
	}
	mock.lockOnCommand.RLock()
	calls = mock.calls.OnCommand
	mock.lockOnCommand.RUnlock()
	return calls
}

// OnInoutput calls OnInoutputFunc.
func (mock *WorldMock) OnInoutput(inoutput pkg.Inoutput) pkg.Inoutput {
	if mock.OnInoutputFunc == nil {
		panic("WorldMock.OnInoutputFunc: method is nil but World.OnInoutput was just called")
	}
	callInfo := struct {
		Inoutput pkg.Inoutput
	}{
		Inoutput: inoutput,
	}
	mock.lockOnInoutput.Lock()
	mock.calls.OnInoutput = append(mock.calls.OnInoutput, callInfo)
	mock.lockOnInoutput.Unlock()
	return mock.OnInoutputFunc(inoutput)
}

// OnInoutputCalls gets all the calls that were made to OnInoutput.
// Check the length with:
//     len(mockedWorld.OnInoutputCalls())
func (mock *WorldMock) OnInoutputCalls() []struct {
	Inoutput pkg.Inoutput
} {
	var calls []struct {
		Inoutput pkg.Inoutput
	}
	mock.lockOnInoutput.RLock()
	calls = mock.calls.OnInoutput
	mock.lockOnInoutput.RUnlock()
	return calls
}
