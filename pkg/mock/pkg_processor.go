// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/tobiassjosten/nogfx/pkg"
	"sync"
)

// Ensure, that ProcessorMock does implement pkg.Processor.
// If this is not the case, regenerate this file with moq.
var _ pkg.Processor = &ProcessorMock{}

// ProcessorMock is a mock implementation of pkg.Processor.
//
// 	func TestSomethingThatUsesProcessor(t *testing.T) {
//
// 		// make and configure a mocked pkg.Processor
// 		mockedProcessor := &ProcessorMock{
// 			ProcessFunc: func(inoutput pkg.Inoutput) pkg.Inoutput {
// 				panic("mock out the Process method")
// 			},
// 		}
//
// 		// use mockedProcessor in code that requires pkg.Processor
// 		// and then make assertions.
//
// 	}
type ProcessorMock struct {
	// ProcessFunc mocks the Process method.
	ProcessFunc func(inoutput pkg.Inoutput) pkg.Inoutput

	// calls tracks calls to the methods.
	calls struct {
		// Process holds details about calls to the Process method.
		Process []struct {
			// Inoutput is the inoutput argument value.
			Inoutput pkg.Inoutput
		}
	}
	lockProcess sync.RWMutex
}

// Process calls ProcessFunc.
func (mock *ProcessorMock) Process(inoutput pkg.Inoutput) pkg.Inoutput {
	if mock.ProcessFunc == nil {
		panic("ProcessorMock.ProcessFunc: method is nil but Processor.Process was just called")
	}
	callInfo := struct {
		Inoutput pkg.Inoutput
	}{
		Inoutput: inoutput,
	}
	mock.lockProcess.Lock()
	mock.calls.Process = append(mock.calls.Process, callInfo)
	mock.lockProcess.Unlock()
	return mock.ProcessFunc(inoutput)
}

// ProcessCalls gets all the calls that were made to Process.
// Check the length with:
//     len(mockedProcessor.ProcessCalls())
func (mock *ProcessorMock) ProcessCalls() []struct {
	Inoutput pkg.Inoutput
} {
	var calls []struct {
		Inoutput pkg.Inoutput
	}
	mock.lockProcess.RLock()
	calls = mock.calls.Process
	mock.lockProcess.RUnlock()
	return calls
}
